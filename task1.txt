Задание 1: 

Задание: Спроектировать схему БД для хранения библиотеки. Интересуют авторы и книги.

Дополнительное задание: Написать SQL который вернет список книг, написанный 3-мя соавторами. Результат: книга - количество соавторов.
Решение должно быть представлено в виде ссылки на https://www.db-fiddle.com/.


https://www.db-fiddle.com/f/uKH5HLSqDBYZmYjd1QBVVQ/5

-- Книги
/*
Так как проектируем библиотеку, то добавил поле is_borrow, которое показывает книга занята или нет
и добавил индекс на поле title, так как подразумеваю, чтобы в нашей библиотеки будут запросы на поиск книг по названию
*/
CREATE TABLE books (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `title` varchar(255) NOT NULL,
	`is_borrow`tinyint(1) DEFAULT 0,
    PRIMARY KEY (`id`)
);

CREATE INDEX title ON books(title);


-- Авторы
CREATE TABLE authors (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `first_name` varchar(70) NOT NULL,
    `last_name` varchar(70) NOT NULL,
    PRIMARY KEY (`id`)
);


-- Связь много ко многим для авторов и книг
CREATE TABLE author_book (
    `author_id` int(11) NOT NULL,
    `book_id` int(11) NOT NULL,
    FOREIGN KEY (book_id) REFERENCES books (id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (author_id) REFERENCES authors (id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (book_id, author_id)
);


INSERT INTO books
    (id, title)
VALUES
    (1, 'Book title 1'),
    (2, 'Book title 2'),
    (3, 'Book title 3'),
    (4, 'Book title 4'),
    (5, 'Book title 5'),
    (6, 'Book title 6'),
    (7, 'Book title 7');


INSERT INTO authors
    (id, first_name, last_name)
VALUES
    (1, 'first name 1', 'last name 1'),
    (2, 'first name 2', 'last name 2'),
    (3, 'first name 3', 'last name 3'),
    (4, 'first name 4', 'last name 4'),
    (5, 'first name 5', 'last name 5');


INSERT INTO author_book
    (author_id, book_id)
VALUES
    (1, 1),
    (2, 2),
    (2, 1),
    (3, 3),
    (3, 2),
    (3, 1),
    (4, 4),
    (4, 3),
    (4, 2),
    (4, 1),
    (5, 5),
    (5, 4),
    (5, 3),
    (5, 2),
    (5, 1);


SELECT b.title, COUNT(b.id) AS count
FROM books AS b
INNER JOIN author_book AS a_b ON a_b.book_id = b.id
GROUP BY b.id HAVING COUNT(b.id) = 3;